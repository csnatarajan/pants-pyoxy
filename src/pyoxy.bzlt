def make_exe():
    dist = default_python_distribution()
    policy = dist.make_python_packaging_policy()
#    policy.set_resource_handling_mode("files")
#    policy.include_classified_resources = True
    policy.allow_files = True
    policy.include_file_resources = True
    policy.file_scanner_emit_files = True
    policy.file_scanner_classify_files = True
    policy.extension_module_filter = "no-copyleft"
    # Note: Adding this for pydanic and libs that have the "unable to load from memory" error
    # https://github.com/indygreg/PyOxidizer/issues/438
    policy.resources_location_fallback = "filesystem-relative:lib"
    python_config = dist.make_python_interpreter_config()
    python_config.module_search_paths = ["$ORIGIN/lib"]
    $RUN_MODULE
    exe = dist.to_python_executable(
        name="$NAME",
        packaging_policy=policy,
        config=python_config,
    )
    exe.add_python_resources(exe.pip_install($WHEELS))
    $UNCLASSIFIED_RESOURCE_INSTALLATION
    return exe

def make_embedded_resources(exe):
    return exe.to_embedded_resources()

def make_install(exe):
    # Create an object that represents our installed application file layout.
    files = FileManifest()
    # Add the generated executable to our install layout in the root directory.
    files.add_python_resource(".", exe)
    return files

register_target("exe", make_exe)

register_target("resources", make_embedded_resources, depends=["exe"], default_build_script=True)

register_target("install", make_install, depends=["exe"], default=True)

resolve_targets()
